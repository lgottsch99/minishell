goals for next week 29.1.:

name for team! amazing shell, Code and Chaos, Shell Shockers, Shell we?,  try again?, Shell Yeah!, Error 404: Team Name Not Found, C-affeine Break

get github running OK

OK do more research what is parsing + execution (what to expect from the code) //what about lexing? it seems to be good for parsing as well

maybe implent some built ins
->get ready to split responsibility, be able to start the real deal


steps:
1. get basic working shell version (that can be used for testing too)
2. use github and work in branches on new features
    (tips: always git pull before writing sth new, main branch should always be working)


----------------------------------------------------------------------------------------
goals next meetup wednesday 5.2.

get started 
dana parsing + signals
lilli exec + builtins

----------------------------------------------------------------------------------------
12.2.

when to do env handling in parsing or exec? ->in parsing bc only need to handle extension. 

-> need use own env list CHANGED ENV LIST STRUCTURE A LITTLE ok

----------------------------------------------------------------------------------------

26.2.
topics:

??export: quote handling possible in parsing part? export lilli=cool lilli="cool" should have same result

parsing: multiple redirections should work (eg cat<a2.txt (IN) >a3.txt > a4.txt (OUT))

$?: int exit_stat

??here doc  
	-here doc: maybe needs to be implemented in parsing: 
		if << found in input string -> separate prompt loop going on until delimiter is typed? (each line saved,...) 

to do:
	-heredoc
	-signals
	-maybe change exit nr to standard error handling??
	-display pwd somehow?? or just use pwd to prove
	-freeing: final implement after putting all parts Together -> should be ok
	-norm



debug: 
		remove t_commmand -> command ??
		parsing: 
			input: export var="sth" 
					-> not parsed like arg[0]: export, arg[1]:var="sth" (builtin export)
		running minishell in minishell?
		parsing not working with own environ list
		LILLI get path: add function of ./ (in current dir) ../ one up or ./project/minishell with path from current dir

----------------------------------------------------------------------------------------
27.2

dana:
	heredoc:
		make check for if it really only is delimiter before going to execution
	signals
	change envp in tokenizing to environ list
	append mode >> 


lilli;
	execution path thing OK
	debug run ms from within ms: OK
		when 2nd shell all env info lost OK

	freeing: 
		freeing check every command, pipes OK 
		free after exit OK

	here doc
	some signal testing

		free after signal in pipe and not
	testinggggg

	norm:
		builtins
		

questions + issues: 
	-leaking fds OK

	- cmd: export lilli="cool" doesnt recognize lilli="cool" as whole thing 
		( you typed: export lilli="cool"
		Token: export, Type: 0
		Token: cool, Type: 0		
		Token: (null), Type: 9)

	- 	
	- 	you typed: echo ""  -> possible to not create another arg for empty str?? would prevent a lot of work later ('' and "")
		Token: echo, Type: 0
		Token: , Type: 0
		Token: (null), Type: 9

	-append mode?
	-check and replace fts not allowed
	-check leaks in token. + parsing
	- signals working? everywhere (single cmd, pipeline, builtins, not builtins, here doc)? no leaks?
		ctrl c weird! have to use exit 2x to exit
		
		eg bash:

		env | cat << l
		> ^C
		lgottsch@c1r8s3:~/core/minishell$


----------------------------------------------------------------------------------------
tokenizing?parsing:  
	need to implement syntax errors?? like: "ls < > "
	need more safety checks:
		check if input only space 
		or empty commands(enter)OK 
		or empty "" 					 if any yes just return to next loop iteration
		input like . or .. only?

exec:
	/usr/bin/ls nees to work same as ls Ok
	/usr/bin/ls -l same as ls -l OK 
	complex relative path: /../../.. OK
	?switch access X OK path logic to after getting the path. not in get_exec_path
	
	exit : arg + exit stat OK
	input like <<<<<<<<<<< or ||||| etc -> crash !!! handle in execution OK

	TO DO return values needed to be same as bash??: 
		mostly ok but TODO: check i/o redirection errors
	
TO DO make every malloc fail and check for leaks, 
	check every ft protection
	check heredoc on error

signals in heredoc

echo -nnn same as bash?
